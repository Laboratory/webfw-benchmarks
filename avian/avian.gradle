static platform() {
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        'linux'
    } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        'windows'
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        'macosx'
    }
}

static arch() {
    final s = System.getProperty("os.arch")
    s == "amd64" ? "x86_64" : s
}

static java_home() {
    System.properties.'java.home'
}

def avianBuildDir(File buildDir) {
    "${buildDir}/avian/build/${platform()}-${arch()}-tails"
}

task standalone(dependsOn: 'shadowJar') {
    doLast {
        if (!file("${buildDir}/avian").exists()) {
            exec {
                commandLine 'git', 'clone', 'https://github.com/ReadyTalk/avian.git', "${buildDir}/avian"
            }
        }
        GFileUtils.deleteQuietly(file("${buildDir}/all"))
        exec {
            workingDir "${buildDir}/avian"
            commandLine(*(['make', 'tails=true', "platform=${platform()}"]))
        }
        copy {
            from zipTree(file("${buildDir}/libs/${project.name}-all.jar"))
            into "${buildDir}/all"
        }
        exec {
            workingDir "${buildDir}/all"
            commandLine 'ar', 'x', "${avianBuildDir(buildDir)}/libavian.a"
        }
        copy {
            from "${avianBuildDir(buildDir)}/classpath.jar"
            into "${buildDir}/all"
        }
        GFileUtils.moveFile(file("${buildDir}/all/classpath.jar"), file("${buildDir}/all/boot.jar"))
        file("${buildDir}/all").listFiles()
                .findAll { it.name != 'boot.jar' && !it.name.endsWith('.o') }.each { f ->
            exec {
                workingDir "${buildDir}/all"
                commandLine 'jar', 'u0f', 'boot.jar', f.name
            }
        }
        exec {
            workingDir "${buildDir}/all"
            commandLine "${avianBuildDir(buildDir)}/binaryToObject/binaryToObject", 'boot.jar', 'boot-jar.o', '_binary_boot_jar_start', '_binary_boot_jar_end', platform(), arch()
        }
        copy {
            from "${rootDir}/src/embedded-jar-main.cpp"
            into "${buildDir}/all"
        }
        exec {
            workingDir "${buildDir}/all"
            commandLine 'g++', "-I${java_home()}/../include", "-I${java_home()}/../include/darwin", '-D_JNI_IMPLEMENTATION_', '-c', 'embedded-jar-main.cpp', '-o', 'main.o'
        }
        exec {
            workingDir "${buildDir}/all"
            commandLine '/bin/bash', '-c', "g++ -rdynamic *.o -ldl -lpthread -lz -o ${project.name}-standalone ${platform() == "macosx" ? '-framework CoreFoundation' : ''}"
        }
        exec {
            workingDir "${buildDir}/all"
            commandLine 'strip', '-S', '-x', "${project.name}-standalone"
        }
        copy {
            from "${buildDir}/all/${project.name}-standalone"
            into "${buildDir}"
        }
    }
}


